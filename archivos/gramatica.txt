PROGRAM ::= BLOCK
BLOCK ::= FUNCTION_M main parenl parenr keyl LIST_STATEMENT keyr
FUNCTION_M  ::= FUNCTION FUNCTION_M
FUNCTION_M  ::= ''
FUNCTION ::= TYPE function id parenl PARAM_DEF_M parenr keyl LIST_STATEMENT RETURN keyr
PARAM_DEF_M ::= TYPE id PARAM_DEF 
PARAM_DEF_M ::= ''
PARAM_DEF ::= comma TYPE id PARAM_DEF
PARAM_DEF ::= ''
PARAM_M ::= E PARAM_E
PARAM_M ::= ''
PARAM_E ::= comma E PARAM_E
PARAM_E ::= ''
PRINT ::= print parenl E parenr dotcomma
RETURN ::= return E dotcomma
TYPE ::= int
TYPE ::= bool
LIST_STATEMENT ::= STATEMENT LIST_STATEMENT
LIST_STATEMENT ::= ''
STATEMENT ::= ASSIGN
STATEMENT ::= DECL

ASSIGN ::= id equal E dotcomma

DECL ::= TYPE id dotcomma
DECL ::= FUNC_DECL
STATEMENT ::= IF_DECL 
STATEMENT ::= WHILE_DECL 
STATEMENT ::= FOR_DECL 
E ::= T E'
E' ::= OPER T E' 
E' ::= ''
T ::= parenl E parenr
T ::= TERM
IF_DECL ::= if parenl COMPARATION parenr keyl E keyr ELSE_DECL
ELSE_DECL ::= else keyl E keyr 
ELSE_DECL ::= ''
WHILE_DECL ::= while parenl COMPARATION parenr keyl E keyr
FOR_DECL ::= for parenl F dotcomma COMPARATION dotcomma id opemasmas parenr keyl E keyr
F ::= int UNO equal TERM
COMPARATION ::= TERM OPER_COMP TERM
OPER_COMP ::= igualq 
OPER_COMP ::= noigualq
OPER_COMP ::= menorq
OPER_COMP ::= mayorq 
OPER_COMP ::= menoriguq
OPER_COMP ::= mayoiguq
TERM ::= id TERM_FUNC
TERM ::= num
TERM ::= boolean
TERM_FUNC ::= parenl PARAM_M parenr
TERM_FUNC ::= ''
UNO ::= id 
OPER ::= or 
OPER ::= and
OPER ::= opesuma 
OPER ::= opemenos
OPER ::= opemult
OPER ::= opediv 
OPER ::= opemod